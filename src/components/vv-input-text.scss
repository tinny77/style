@use 'sass:map';
@import '../context';

$component-name: map.get($components-names, vv-input-text);
$component-map: $vv-input-text;
$component-selector: '.#{ $component-name}';

@include spread-map-into-bem(
	$map: $component-map,
	$block: $component-name,
	$props: $use-custom-props-for-components,
	$zero-specificity: $zero-specificity-for-compoenents
);

// disabled
@include wrap-with-where(
	$selector: '#{$component-selector}:has(input:disabled)',
	$enabled: $zero-specificity-for-compoenents
) {
	@extend %#{$component-name}--disabled !optional;
}

@if map.get($component-map, 'state', 'disabled', 'element') {
	@each $element,
		$map in map.get($component-map, 'state', 'disabled', 'element')
	{
		@include wrap-with-where(
			$selector:
				'#{$component-selector}:has(input:disabled) #{$component-selector}__#{$element}',
			$enabled: $zero-specificity-for-compoenents
		) {
			@extend %#{$component-name}-state-disabled__#{$element} !optional;
		}
	}
}

// readonly
@include wrap-with-where(
	$selector: '#{$component-selector}:has(input:readonly)',
	$enabled: $zero-specificity-for-compoenents
) {
	@extend %#{$component-name}--readonly !optional;
}

@if map.get($component-map, 'state', 'readonly', 'element') {
	@each $element,
		$map in map.get($component-map, 'state', 'readonly', 'element')
	{
		@include wrap-with-where(
			$selector:
				'#{$component-selector}:has(input:readonly) #{$component-selector}__#{$element}',
			$enabled: $zero-specificity-for-compoenents
		) {
			@extend %#{$component-name}-state-readonly__#{$element} !optional;
		}
	}
}
