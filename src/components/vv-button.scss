@use 'sass:map';
@import '../context';

$component-name: map.get($components-names, vv-button);
$component-map: $vv-button;
$component-selector: '.' + $component-name;

@include spread-map-into-bem(
	$map: $component-map,
	$block: $component-name,
	$props: $use-custom-props-for-components,
	$zero-specificity: $zero-specificity-for-compoenents,
	$custom-block: true
) {
	// custom block
	%#{$component-name} {
		-webkit-tap-highlight-color: transparent;
		-webkit-touch-callout: none;
		align-items: center;
		cursor: pointer;
		display: inline-flex;
		justify-content: center;
		text-align: center;
		touch-action: manipulation;
		user-select: none;

		@include spread-map-into-attrs(
			$map: $component-map,
			$prefix: $component-name,
			$props: $use-custom-props-for-components
		);

		@media (prefers-reduced-motion: reduce) {
			transition: none;
		}
	}

	@include wrap-with-where(
		$selector: $component-selector,
		$enabled: $zero-specificity-for-compoenents
	) {
		&:where(a[href], button, input[type='button'], input[type='submit'], input[type='reset']),
		&::file-selector-button {
			@extend %#{$component-name};
		}

		// input file
		&::file-selector-button {
			margin-inline-end: var(
				--vv-button-gap,
				map.get($component-map, 'gap')
			);
		}

		// icons
		& > :where(svg, [data-icon]) {
			fill: none;
			flex-shrink: 0;
			stroke-linecap: round;
			stroke-linejoin: round;

			@include spread-map-into-attrs(
				$map: map.get($component-map, 'element', 'icon'),
				$prefix: #{$component-name}-element-icon,
				$props: $use-custom-props-for-components
			);
		}
	}

	// icon in modifier
	@if map.get($component-map, 'modifier') {
		@each $modifier, $modifier-map in map.get($component-map, 'modifier') {
			@if map.get($modifier-map, 'element', 'icon') {
				@include wrap-with-where(
					$selector: $component-selector + '--' + $modifier +
						' > :where(svg, [data-icon])',
					$enabled: $zero-specificity-for-compoenents
				) {
					@include spread-map-into-attrs(
						$map: map.get($modifier-map, 'element', 'icon'),
						$prefix: #{$component-name}-modifier-#{$modifier}-element-icon,
						$props: $use-custom-props-for-components
					);
				}
			}
		}
	}
}
