@use 'sass:map';
@use 'sass:color';
@use 'sass:string';

@function map-get-deep($map, $keys...) {
	@each $key in $keys {
		$map: map.get($map, $key);
	}
	@return $map;
}

@function map-merge-deep($parent-map, $child-map) {
	$result: $parent-map;
	@each $key, $value in $child-map {
		@if (not map-has-key($result, $key)) or
			(type-of(map-get($result, $key)) != type-of($value)) or
			(
				not
					(
						type-of(map-get($result, $key)) ==
							map and
							type-of($value) ==
							map
					)
			)
		{
			$result: map.merge(
				$result,
				(
					$key: $value,
				)
			);
		} @else {
			$result: map.merge(
				$result,
				(
					$key: map-merge-deep(map.get($result, $key), $value),
				)
			);
		}
	}
	@return $result;
}

@function hsla-map($color, $name) {
	@return (
		hue: color.hue($color),
		saturation: color.saturation($color),
		lightness: color.lightness($color),
		#{$name}: hsl(var(--color-#{$name}-hue) var(--color-#{$name}-saturation)
					var(--color-#{$name}-lightness))
	);
}

@function alpha-color($name, $alpha) {
	@return hsla(
		var(--color-#{$name}-hue),
		var(--color-#{$name}-saturation),
		var(--color-#{$name}-lightness),
		#{$alpha}
	);
}

@function hex-to-rgb($hex) {
	@return red($hex), green($hex), blue($hex);
}

@function color-shades-map($color, $name, $steps: 5, $scale: 10%) {
	$result: (#{$name}: $color);
	@for $index from 1 to ($steps + 1) {
		$result: map.merge(
			map.merge(
				$result,
				color-lighten-map($color, $name, $steps, $scale, 'lighten')
			),
			color-darken-map($color, $name, $steps, $scale, 'darken')
		);
	}
	@return $result;
}

@function color-lighten-map(
	$color,
	$name,
	$steps: 5,
	$scale: 10%,
	$prefix: ''
) {
	$result: hsla-map($color, $name);
	@for $index from 1 to ($steps + 1) {
		$key: $index;
		@if $prefix != '' {
			$key: $prefix + '-' + $index;
		}

		$value: color.scale($color, $lightness: $scale * $index);
		$result: map.merge(
			$result,
			(
				#{$key}:
					hsl(
						var(--color-#{$name}-hue)
							var(--color-#{$name}-saturation)
							color.lightness($value)
					)
			)
		);
	}
	@return $result;
}

@function color-darken-map($color, $name, $steps: 5, $scale: 10%, $prefix: '') {
	$result: hsla-map($color, $name);

	@for $index from 1 to ($steps + 1) {
		$key: $index;
		@if $prefix != '' {
			$key: $prefix + '-' + $index;
		}

		$value: color.scale($color, $lightness: -1 * $scale * $index);
		$result: map.merge(
			$result,
			(
				#{$key}:
					hsl(
						var(--color-#{$name}-hue)
							var(--color-#{$name}-saturation)
							color.lightness($value)
					)
			)
		);
	}
	@return $result;
}

@function str-replace($string, $search, $replace: '') {
	$index: string.index($string, $search);

	@if $index {
		@return string.slice($string, 1, $index - 1) + $replace +
			str-replace(
				string.slice($string, $index + string.length($search)),
				$search,
				$replace
			);
	}

	@return $string;
}
