@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

// context
@import 'context';

:export {
	// colors
	@each $key, $value in $colors {
		@if type-of($value) == 'map' {
			@each $subKey, $subValue in $value {
				@if type-of($value) not 'map' {
					#{'colors__' + $key}-#{$subKey}: $subValue;
				}
			}
		} @else {
			#{'colors__' + $key}: $value;
		}
	}

	// aspect-ratio
	@each $key, $value in $aspect-ratio {
		$name: meta.inspect($value);
		$name: str-replace($name, '"', '');

		#{'aspect-ratio__' + $key}: $name;
	}

	// breakpoints
	@each $key, $value in $breakpoints {
		#{'breakpoints__' + $key}: $value;
	}

	// columns
	@each $index in $columns {
		#{'columns__' + $index}: $index;
	}

	// spacing & spacing-dynamic
	@each $size, $value in map.merge($spacing, $spacing-dynamic) {
		@if type-of($value) == 'map' {
			@each $subKey, $subValue in $value {
				@if type-of($value) not 'map' {
					#{'spacers__' + $size}-#{$subKey}: $subValue;
				}
			}
		} @else {
			#{'spacers__' + $size}: $value;
		}
	}

	// font-size & font-size-dynamic
	@each $size, $value in map.merge($font-size, $font-size-dynamic) {
		@if type-of($value) == 'map' {
			@each $subKey, $subValue in $value {
				@if type-of($value) not 'map' {
					#{'font-size__' + $size}-#{$subKey}: $subValue;
				}
			}
		} @else {
			#{'font-size__' + $size}: $value;
		}
	}

	// width spacer
	@each $key, $value in $width {
		$name: meta.inspect($key);
		$name: str-replace($name, '\\/', '/');

		#{'width-spacer__' + $name}: $value;
	}

	// height spacer
	@each $key, $value in $height {
		$name: meta.inspect($key);
		$name: str-replace($name, '\\/', '/');

		#{'height-spacer__' + $name}: $value;
	}

	// border radius
	@each $key, $value in $border-radius {
		#{'border-radius-spacer__' + $key}: $value;
	}

	// border width
	@each $key, $value in $border-width {
		#{'border-width-spacer__' + $key}: $value;
	}
}
