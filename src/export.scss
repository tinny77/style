@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

// context
@import 'context';

:export {
	/* CUSTOMIZATION
    ============================================================== */
	// colors
	@each $key, $value in $colors {
		@if type-of($value) == 'map' {
			@each $subKey, $subValue in $value {
				@if type-of($value) not 'map' {
					@if not
						str-index($subKey, 'hue') and not
						str-index($subKey, 'saturation') and not
						str-index($subKey, 'lightness') and not
						str-index($subKey, 'surface') and not
						str-index($subKey, #{$key})
					{
						#{'colors__' + $key}-#{$subKey}: $subValue;
					}
				}
			}
		} @else {
			#{'colors__' + $key}: $value;
		}
	}

	/* LAYOUT
    ============================================================== */
	// aspect-ratio
	@each $key, $value in $aspect-ratio {
		$name: meta.inspect($value);
		$name: str-replace($name, '"', '');

		#{'aspect-ratio__' + $key}: $name;
	}

	// breakpoints
	@each $key, $value in $breakpoints {
		#{'breakpoints__' + $key}: $value;
	}

	// columns
	@each $index in $columns {
		#{'columns__' + $index}: $index;
	}

	// z-index
	@each $key, $value in $z-index {
		$measure: meta.inspect($value);
		$measure: str-replace($measure, '"', '');

		#{'z-index__' + $key}: $measure;
	}

	/* SPACING
    ============================================================== */
	// spacing & spacing-dynamic
	@each $size, $value in map.merge($spacing, $spacing-dynamic) {
		@if type-of($value) == 'map' {
			@each $subKey, $subValue in $value {
				@if type-of($value) not 'map' {
					#{'spacers__' + $size}-#{$subKey}: $subValue;
				}
			}
		} @else {
			#{'spacers__' + $size}: $value;
		}
	}

	// font-size & font-size-dynamic
	@each $size, $value in map.merge($font-size, $font-size-dynamic) {
		@if type-of($value) == 'map' {
			@each $subKey, $subValue in $value {
				@if type-of($value) not 'map' {
					#{'font-size__' + $size}-#{$subKey}: $subValue;
				}
			}
		} @else {
			#{'font-size__' + $size}: $value;
		}
	}

	// width spacer
	@each $key, $value in $width {
		$name: meta.inspect($key);
		$name: str-replace($name, '\\/', '/');

		#{'width-spacer__' + $name}: $value;
	}

	// height spacer
	@each $key, $value in $height {
		$name: meta.inspect($key);
		$name: str-replace($name, '\\/', '/');

		#{'height-spacer__' + $name}: $value;
	}

	// border radius
	@each $key, $value in $border-radius {
		#{'border-radius-spacer__' + $key}: $value;
	}

	// border width
	@each $key, $value in $border-width {
		#{'border-width-spacer__' + $key}: $value;
	}

	/* SIZING
    ============================================================== */
	// min width
	@each $key, $value in $min-width {
		#{'min-width__' + $key}: $value;
	}

	// min height
	@each $key, $value in $min-height {
		#{'min-height__' + $key}: $value;
	}

	// max width
	@each $key, $value in $max-width {
		#{'max-width__' + $key}: $value;
	}

	// max height
	@each $key, $value in $max-height {
		#{'max-height__' + $key}: $value;
	}

	// max height
	@each $key, $value in $max-height {
		#{'max-height__' + $key}: $value;
	}

	/* TYPOGRAPHY
    ============================================================== */
	// font-family
	@each $key, $value in $font-family {
		#{'font-family__' + $key}: $value;
	}

	// font-weight
	@each $key, $value in $font-weight {
		#{'font-weight__' + $key}: $value;
	}

	// line-height
	@each $key, $value in $line-height {
		#{'line-height__' + $key}: $value;
	}

	// letter-spacing
	@each $key, $value in $letter-spacing {
		#{'letter-spacing__' + $key}: $value;
	}

	// font-variant-numeric
	@each $key, $value in $font-variant-numeric {
		#{'font-variant-numeric__' + $key}: $value;
	}

	// text-align
	@each $index in $text-align {
		#{'text-align__' + $index}: $index;
	}

	// text-decorator-line
	@each $key, $value in $text-decorator-line {
		#{'text-decorator-line__' + $key}: $value;
	}

	// text-decorator-style
	@each $index in $text-decorator-style {
		#{'text-decorator-style__' + $index}: $index;
	}

	// text-decorator-thickness
	@each $key, $value in $text-decorator-thickness {
		#{'text-decorator-thickness__' + $key}: $value;
	}

	// text-underline-offset
	@each $key, $value in $text-underline-offset {
		#{'text-underline-offset__' + $key}: $value;
	}

	// text-transform
	@each $key, $value in $text-transform {
		#{'text-transform__' + $key}: $value;
	}

	// vertical-align
	@each $index in $vertical-align {
		#{'vertical-align__' + $index}: $index;
	}

	// white-space
	@each $index in $white-space {
		#{'white-space__' + $index}: $index;
	}

	/* BACKGROUND
    ============================================================== */
	// background-attachment
	@each $index in $background-attachment {
		#{'background-attachment__' + $index}: $index;
	}

	// background-clip
	@each $key, $value in $background-clip {
		#{'background-clip__' + $key}: $value;
	}

	// background-origin
	@each $key, $value in $background-origin {
		#{'background-origin__' + $key}: $value;
	}

	// background-position
	@each $key, $value in $background-position {
		#{'background-position__' + $key}: $value;
	}

	// background-repeat
	@each $key, $value in $background-repeat {
		#{'background-repeat__' + $key}: $value;
	}

	// background-size
	@each $index in $background-size {
		#{'background-size__' + $index}: $index;
	}

	/* BORDER 
    ============================================================== */
	// border-style
	@each $index in $border-style {
		#{'border-style__' + $index}: $index;
	}

	/* EFFECTS 
    ============================================================== */
	// blend-mode
	@each $index in $blend-mode {
		#{'blend-mode__' + $index}: $index;
	}
}
