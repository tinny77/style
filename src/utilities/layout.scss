@use 'sass:map';
@import '../context';

// aspect
@include spread-map-into-utilities(
	$map: $aspect-ratio,
	$class: aspect,
	$attribute: aspect-ratio,
	$prop: aspect
);

// container
:where(.container) {
	width: 100%;

	@each $breakpoint, $value in $breakpoints {
		@if $value > 0 {
			@include media-breakpoint-up($breakpoint) {
				max-width: $value;
			}
		}
	}
}

// columns
@include spread-map-into-utilities(
	$map: $columns,
	$class: columns,
	$attribute: column-count,
	$bps: $breakpoints
);

// break-after
@include spread-map-into-utilities(
	$map: $break-after,
	$class: break-after,
	$attribute: break-after
);

// break-before
@include spread-map-into-utilities(
	$map: $break-before,
	$class: break-before,
	$attribute: break-before
);

// break-inside
@include spread-map-into-utilities(
	$map: $break-inside,
	$class: break-inside,
	$attribute: break-inside
);

// display
@include spread-map-into-utilities(
	$map: (
		table,
		inline-table,
		table-caption,
		table-cell,
		table-column,
		table-column-group,
		table-footer-group,
		table-header-group,
		table-row-group,
		table-row,
		flow-root,
		contents,
		list-item,
	),
	$attribute: display
);

@include spread-map-into-utilities(
	$map: (
		block,
		inline-block,
		inline,
		flex,
		inline-flex,
		grid,
		inline-grid,
		none,
	),
	$attribute: display,
	$bps: $breakpoints
);

// object-fit
@include spread-map-into-utilities(
	$map: $object-fit,
	$class: object,
	$attribute: object-fit
);

// object-position
@include spread-map-into-utilities(
	$map: $object-position,
	$class: object,
	$attribute: object-position
);

// overflow
@each $overflow in (auto, hidden, clip, visible, scroll) {
	:where(.overflow-#{$overflow}) {
		overflow: #{$overflow};
	}

	@each $prefix in (x, y) {
		:where(.overflow-#{$prefix}-#{$overflow}) {
			overflow-#{$prefix}: #{$overflow};
		}
	}
}

// position
@include spread-map-into-utilities(
	$map: $position,
	$attribute: position,
	$bps: $breakpoints
);

// visibility
@include spread-map-into-utilities(
	$map: $visibility,
	$attribute: visibility,
	$bps: $breakpoints
);

// top / right / bottom / left
@each $size, $value in map.merge($spacing, $spacing-dynamic) {
	// check if value is not a map (spacing-dynamic)
	$var: var(--spacing-#{$size});
	@if type-of($value) != 'map' {
		$var: var(--spacing-#{$size}, #{$value});
	}

	// all
	%inset-#{$size},
	:where(.inset-#{$size}) {
		inset: #{$var};
	}

	// horizontal
	%inset-x-#{$size},
	:where(.inset-x-#{$size}) {
		inset-inline: #{$var};
	}

	// vertical
	%inset-y-#{$size},
	:where(.inset-y-#{$size}) {
		inset-block: #{$var};
	}

	// sides
	@each $direction in(top, right, bottom, left) {
		%#{$direction}-#{$size},
		:where(.#{$direction}-#{$size}) {
			#{$direction}: #{$var};
		}
	}
}

// z-index
@include spread-map-into-utilities(
	$map: $z-index,
	$class: z,
	$attribute: z-index,
	$prop: z
);
