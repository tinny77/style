@use 'sass:map';
@import '../context';

// flex direction
@include spread-map-into-utilities(
	$map: $flex-direction,
	$class: flex,
	$attribute: flex-direction
);

// flex wrap
@include spread-map-into-utilities(
	$map: $flex-wrap,
	$class: flex,
	$attribute: flex-wrap
);

// flex
@include spread-map-into-utilities($map: $flex, $class: flex, $attribute: flex);

// flex grow
@each $prefix, $prop in (grow: flex-grow, shrink: flex-shrink) {
	@each $value, $postfix in (1: '', 0: '-0') {
		%#{$prefix}#{$postfix},
		:where(.#{$prefix}#{$postfix}) {
			#{$prop}: #{$value};
		}
	}
}

// order
@include spread-map-into-utilities(
	$map: $order,
	$class: order,
	$attribute: order
);

// gap
@each $size, $value in map.merge($spacing, $spacing-dynamic) {
	$default: null;

	// check if value is not a map (spacing-dynamic)
	@if type-of($value) != 'map' {
		$default: $value;
	}

	$var: var(--spacing-#{$size}, #{$default});

	// all
	%gap-#{$size},
	:where(.gap-#{$size}) {
		gap: #{$var};
	}

	// horizontal
	%gap-x-#{$size},
	:where(.gap-x-#{$size}) {
		column-gap: #{$var};
	}

	// vertical
	%gap-y-#{$size},
	:where(.gap-y-#{$size}) {
		row-gap: #{$var};
	}
}

// justify and align content
@each $class, $attribute in (justify: justify-content, content: align-content) {
	@include spread-map-into-utilities(
		$map: $justify-align-content,
		$class: $class,
		$attribute: $attribute
	);
}

// justify and align items
@each $class, $attribute in (justify-items: justify-items, items: align-items) {
	@include spread-map-into-utilities(
		$map: $justify-align-items,
		$class: $class,
		$attribute: $attribute
	);
}

// justify and align self
@each $class, $attribute in (justify-self: justify-self, self: align-self) {
	@include spread-map-into-utilities(
		$map: $justify-align-self,
		$class: $class,
		$attribute: $attribute
	);
}
