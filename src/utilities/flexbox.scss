@use 'sass:map';
@import '../context';

// flex direction
@include spread-map-into-utilities(
	$map: (
		row: row,
		row-reverse: row-reverse,
		col: column,
		col-reverse: column-reverse,
	),
	$class: flex,
	$attribute: flex-direction
);

// flex wrap
@include spread-map-into-utilities(
	$map: (
		wrap,
		wrap-reverse,
		nowrap,
	),
	$class: flex,
	$attribute: flex-wrap
);

// flex
@include spread-map-into-utilities(
	$map: (
		1: 1 1 0%,
		auto: 1 1 auto,
		initial: 0 1 auto,
		none: none,
	),
	$class: flex,
	$attribute: flex
);

// flex grow
@each $prefix, $prop in (grow: flex-grow, shrink: flex-shrink) {
	@each $value, $postfix in (1: '', 0: '-0') {
		%#{$prefix}#{$postfix},
		:where(.#{$prefix}#{$postfix}) {
			#{$prop}: #{$value};
		}
	}
}

// order
@include spread-map-into-utilities(
	$map: (
		1: 1,
		2: 2,
		3: 3,
		4: 4,
		5: 5,
		6: 6,
		7: 7,
		8: 8,
		9: 9,
		10: 10,
		11: 11,
		12: 12,
		first: -9999,
		last: 9999,
		none: 0,
	),
	$class: order,
	$attribute: order
);

// gap
@each $size, $value in map.merge($spacing, $spacing-dynamic) {
	$default: null;

	// check if value is not a map (spacing-dynamic)
	@if type-of($value) != 'map' {
		$default: $value;
	}

	$var: var(--spacing-#{$size}, #{$default});

	// all
	%gap-#{$size},
	:where(.gap-#{$size}) {
		gap: #{$var};
	}

	// horizontal
	%gap-x-#{$size},
	:where(.gap-x-#{$size}) {
		column-gap: #{$var};
	}

	// vertical
	%gap-y-#{$size},
	:where(.gap-y-#{$size}) {
		row-gap: #{$var};
	}
}

// justify and align content
@each $class, $attribute in (justify: justify-content, content: align-content) {
	@include spread-map-into-utilities(
		$map: (
			start: flex-start,
			end: flex-end,
			center: center,
			between: space-between,
			around: space-around,
			evenly: space-evenly,
		),
		$class: $class,
		$attribute: $attribute
	);
}

// justify and align items
@each $class, $attribute in (justify-items: justify-items, items: align-items) {
	@include spread-map-into-utilities(
		$map: (
			start: flex-start,
			end: flex-end,
			center: center,
			baseline: baseline,
			stretch: stretch,
		),
		$class: $class,
		$attribute: $attribute
	);
}

// justify and align self
@each $class, $attribute in (justify-self: justify-self, self: align-selft) {
	@include spread-map-into-utilities(
		$map: (
			auto: auto,
			start: flex-start,
			end: flex-end,
			center: center,
			baseline: baseline,
			stretch: stretch,
		),
		$class: $class,
		$attribute: $attribute
	);
}
