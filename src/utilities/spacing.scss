@use 'sass:map';
@import '../context';

@each $prefix, $prop in (m: margin, p: padding, n: margin) {
	@each $size, $value in map.merge($spacing, $spacing-dynamic) {
		$var: var(--spacing-#{$size});

		// check if value is not a map (spacing-dynamic)
		@if type-of($value) != 'map' {
			$var: var(--spacing-#{$size}, #{$value});
		}

		// negative margin
		@if $prefix == 'n' {
			$var: calc(-1 * #{$var});
		}

		// all
		%#{$prefix}#{$size},
		:where(.#{$prefix}-#{$size}) {
			#{$prop}: #{$var};
		}

		// horizontal
		%#{$prefix}x-#{$size},
		:where(.#{$prefix}x-#{$size}) {
			#{$prop}-left: #{$var};
			#{$prop}-right: #{$var};
		}

		// vertical
		%#{$prefix}y-#{$size},
		:where(.#{$prefix}y-#{$size}) {
			#{$prop}-top: #{$var};
			#{$prop}-bottom: #{$var};
		}

		// sides
		@each $direction-prefix,
			$direction in(t: top, r: right, b: bottom, l: left)
		{
			%#{$prefix}#{$direction-prefix}-#{$size},
			:where(.#{$prefix}#{$direction-prefix}-#{$size}) {
				#{$prop}-#{$direction}: #{$var};
			}
		}
	}
}

// auto
%m-auto,
:where(.m-auto) {
	margin: auto;
}

%mx-auto,
:where(.mx-auto) {
	margin-left: auto;
	margin-right: auto;
}

%my-auto,
:where(.my-auto) {
	margin-top: auto;
	margin-bottom: auto;
}

@each $direction-prefix, $direction in(t: top, r: right, b: bottom, l: left) {
	%m#{$direction-prefix}-auto,
	:where(.m#{$direction-prefix}-auto) {
		margin-#{$direction}: auto;
	}
}
